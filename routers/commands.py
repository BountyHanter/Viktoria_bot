from aiogram import F, Bot, Router
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from keyboards.inline import MyCallback, start_buttons
from utils.states import Bitrix
from bot_data.info_for_bitrix import info
from bitrix import bitrix_add_deal,bitrix_add_contact


router = Router()


# –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
@router.message(CommandStart())
async def start(message: Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å??', reply_markup=start_buttons())


@router.message(Command('cancel'))
async def cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–í—Å–µ —ç—Ç–∞–ø—ã –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã, –º–æ–∂–µ—à—å –Ω–∞—á–∏–Ω–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞', reply_markup=start_buttons())


# –û—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Stage's –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
@router.callback_query(MyCallback.filter(F.foo == 'Bitrix24'))
async def start_bitrix(query: CallbackQuery, bot: Bot, state : FSMContext):
    await query.message.answer('–û–∫–µ–π, –∑–∞–ø–æ–ª–Ω–∏–º –∑–∞–∫–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –≤ –ë–∏—Ç—Ä–∏–∫—Å')
    await bot.answer_callback_query(query.id)
    await bot.edit_message_reply_markup(query.from_user.id, query.message.message_id) # —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    await query.answer()
    await state.set_state(Bitrix.name)
    await query.message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞, –≤–≤–µ–¥–∏ –∏–º—è')


@router.message(Bitrix.name)
async def bitrix_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    get_data = await state.get_data()
    info['name'] = get_data.get('name')
    await state.set_state(Bitrix.second_name)
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é')


@router.message(Bitrix.second_name)
async def bitrix_second_name(message: Message, state: FSMContext):
    await state.update_data(second_name=message.text)
    get_data = await state.get_data()
    info['second_name'] = get_data.get('second_name')
    await state.set_state(Bitrix.city)
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≥–æ—Ä–æ–¥')


@router.message(Bitrix.city)
async def bitrix_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    get_data = await state.get_data()
    info['city'] = get_data.get('city')
    await state.set_state(Bitrix.job_title)
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å')


@router.message(Bitrix.job_title)
async def bitrix_city(message: Message, state: FSMContext):
    await state.update_data(job_title=message.text)
    get_data = await state.get_data()
    info['job_title'] = get_data.get('job_title')
    await state.set_state(Bitrix.tenchat_link)
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–Ω—á–∞—Ç')


@router.message(Bitrix.tenchat_link)
async def bitrix_city(message: Message, state: FSMContext):
    await state.update_data(tenchat_link=message.text)
    get_data = await state.get_data()
    info['tenchat_link'] = get_data.get('tenchat_link')
    await state.set_state(Bitrix.comment)
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')


@router.message(Bitrix.comment)
async def bitrix_city(message: Message, state: FSMContext):
    await state.update_data(comment=message.text)
    get_data = await state.get_data()
    info['comment'] = get_data.get('comment')
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Å–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–ø–∏—à—É—Å—å')

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    contact = bitrix_add_contact.NewContact(info['name'], info['second_name'], info['city'], info['job_title'], info['tenchat_link'])
    respond_id = contact.send_request() # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    if respond_id is None:
        await message.answer('‚ö†‚ö†‚ö†–û–û–π-–æ–π, —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ–∑–¥–∞–Ω–∏—è ‚û°–∫–æ–Ω—Ç–∞–∫—Ç–∞‚¨Ö, '
                             ' —Å–æ–æ–±—â–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É —á—Ç–æ–±—ã –æ–Ω –ø—Ä–æ–≤–µ—Ä–∏–ª –ª–æ–≥–∏üîéüîéüîé, –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑',
                             reply_markup=start_buttons())
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
    deal = bitrix_add_deal.NewDeal(info['comment'], respond_id)
    final_respond = deal.send_request()
    if final_respond is not True:
        await message.answer('‚ö†‚ö†‚ö†–û–π-–æ–π, —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ–∑–¥–∞–Ω–∏—è ‚û°—Å–¥–µ–ª–∫–∏‚¨Ö, '
                             '—Å–æ–æ–±—â–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É —á—Ç–æ–±—ã –æ–Ω –ø—Ä–æ–≤–µ—Ä–∏–ª –ª–æ–≥–∏üîéüîéüîé, –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑',
                             reply_markup=start_buttons())
        return

    await message.answer('–í—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æüëçüëç, –∏–¥–∏ –ø—Ä–æ–≤–µ—Ä—å —Å–¥–µ–ª–∫—É, '
                         '–∏–ª–∏ –º–æ–∂–µ—à—å —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—Éüëáüëáüëá', reply_markup=start_buttons())



